using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;
using System.Windows.Forms;

namespace Data
{
    internal class Connect
    {
        private static String cliComConnectionString = GetConnectString();

        internal static String ConnectionString { get => cliComConnectionString; }

        private static String GetConnectString()
        {
            SqlConnectionStringBuilder cs = new SqlConnectionStringBuilder();
            cs.DataSource = "(local)";
            cs.InitialCatalog = "College1en";
            cs.UserID = "sa";
            cs.Password = "sysadm";
            return cs.ConnectionString;
        }
    }


    internal class DataTables
    {
        private static SqlDataAdapter adapterPrograms = InitAdapterPrograms();
        private static SqlDataAdapter adapterCourses = InitAdapterCourses();
        private static SqlDataAdapter adapterStudents = InitAdapterStudents();
        private static SqlDataAdapter adapterEnrollments = InitAdapterEnrollments();

        private static DataSet ds = InitDataSet();

        private static SqlDataAdapter InitAdapterPrograms()
        {
            SqlDataAdapter r = new SqlDataAdapter(
                "SELECT * FROM Programs ORDER BY ProgId",
                Connect.ConnectionString
                );

            SqlCommandBuilder builder = new SqlCommandBuilder(r);
            r.UpdateCommand = builder.GetUpdateCommand();
          

            return r;
        }

        private static SqlDataAdapter InitAdapterCourses()
        {
            SqlDataAdapter r = new SqlDataAdapter(
                "SELECT * FROM Courses ORDER BY CId",
                Connect.ConnectionString
                );

            SqlCommandBuilder builder = new SqlCommandBuilder(r);
            builder.ConflictOption = ConflictOption.OverwriteChanges;
            r.UpdateCommand = builder.GetUpdateCommand();

            return r;
        }


        private static SqlDataAdapter InitAdapterEnrollments()
        {
           SqlDataAdapter r = new SqlDataAdapter(
                "SELECT * FROM Enrollments ORDER BY CId",
                Connect.ConnectionString
                );

            SqlCommandBuilder builder = new SqlCommandBuilder(r);
            builder.ConflictOption = ConflictOption.OverwriteChanges;
            r.UpdateCommand = builder.GetUpdateCommand();

            return r;
        }


        private static SqlDataAdapter InitAdapterStudents()
        {
            SqlDataAdapter r = new SqlDataAdapter(
                "SELECT * FROM Students ORDER BY StId",
                Connect.ConnectionString
                );

            SqlCommandBuilder builder = new SqlCommandBuilder(r);
            builder.ConflictOption = ConflictOption.OverwriteChanges;
            r.UpdateCommand = builder.GetUpdateCommand();

            return r;

        }


        private static DataSet InitDataSet()
        {
            DataSet ds = new DataSet();
            loadPrograms(ds);
            loadCourses(ds);
            loadStudents(ds);
            loadEnrollments(ds);
           
            return ds;
        }

        private static void loadPrograms(DataSet ds)
        {
            adapterPrograms.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            adapterPrograms.Fill(ds, "Programs");

        }
        private static void loadCourses(DataSet ds)
        {
            adapterCourses.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            adapterCourses.Fill(ds, "Courses");

          
                ForeignKeyConstraint fkc = new ForeignKeyConstraint(
                    "FK_Courses_Programs",
                    ds.Tables["Programs"].Columns["ProgId"],
                    ds.Tables["Courses"].Columns["ProgId"]
                );

                ds.Tables["Courses"].Constraints.Add(fkc);
                fkc.DeleteRule = Rule.Cascade;
                fkc.UpdateRule = Rule.Cascade;
            
        }

        private static void loadStudents(DataSet ds)
        {
            adapterStudents.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            adapterStudents.Fill(ds, "Students");

           
          
                ForeignKeyConstraint fkc = new ForeignKeyConstraint(
                    "FK_Students_Programs",
                    ds.Tables["Students"].Columns["ProgId"],
                    ds.Tables["Programs"].Columns["ProgId"]
                );
                ds.Tables["Programs"].Constraints.Add(fkc);
                fkc.DeleteRule = Rule.Cascade;
                fkc.UpdateRule = Rule.Cascade;
            
            
            
        }


        private static void loadEnrollments(DataSet ds)
        {
            adapterEnrollments.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            adapterEnrollments.Fill(ds, "Enrollments");

         
                ForeignKeyConstraint fkc = new ForeignKeyConstraint(
                    "FK_Enrollments_Courses",
                    ds.Tables["Courses"].Columns["CId"],  
                    ds.Tables["Enrollments"].Columns["CId"]  
                );

                ds.Tables["Enrollments"].Constraints.Add(fkc);
                fkc.DeleteRule = Rule.Cascade;
                fkc.UpdateRule = Rule.Cascade;
           
          
                ForeignKeyConstraint fkc2 = new ForeignKeyConstraint(
                    "FK_Enrollments_Students",
                    ds.Tables["Students"].Columns["StId"],  
                    ds.Tables["Enrollments"].Columns["StId"]  
                );

                ds.Tables["Enrollments"].Constraints.Add(fkc2);
                fkc2.DeleteRule = Rule.Cascade;
                fkc2.UpdateRule = Rule.Cascade;
          
        }




        internal static SqlDataAdapter getAdapterPrograms()
        {
            return adapterPrograms;
        }
        

        internal static SqlDataAdapter getAdapterCourses()
        {
            return adapterCourses;
        }


        internal static SqlDataAdapter getAdapterStudents()
        {
            return adapterStudents;
        }


        internal static SqlDataAdapter getAdapterEnrollments()
        {
            return adapterEnrollments;
        }


        internal static DataSet getDataSet()
        {
            return ds;
        }

    }

    internal class Programs
    {
        private static SqlDataAdapter adapter = DataTables.getAdapterPrograms();
        private static DataSet ds = DataTables.getDataSet();

        internal static DataTable GetPrograms()
        { 
            return ds.Tables["Programs"];
        }


        internal static int UpdatePrograms()
        {
            if (!ds.Tables["Programs"].HasErrors) 
            { 
                return adapter.Update(ds.Tables["Programs"]);
            }
            else
            {
                return -1;
            }
        }


    }
    internal class Students
    {
        private static SqlDataAdapter adapter = DataTables.getAdapterStudents();
        private static DataSet ds = DataTables.getDataSet();


        internal static DataTable GetStudents()
        {
            return ds.Tables["Students"];
        }


        internal static int UpdateStudents()
        {
            if (!ds.Tables["Students"].HasErrors)
            {
                return adapter.Update(ds.Tables["Students"]);
            }
            else
            {
                return -1;
            }
        }
    }



    internal class Courses
    {
        private static SqlDataAdapter adapter = DataTables.getAdapterCourses();
        private static DataSet ds = DataTables.getDataSet();


        internal static DataTable GetCourses()
        {
            return ds.Tables["Courses"];
        }


        internal static int UpdateCourses()
        {
            if (!ds.Tables["Courses"].HasErrors)
            {
                return adapter.Update(ds.Tables["Courses"]);
            }
            else
            {
                return -1;
            }
        }





    }


    internal class Enrollments
    {
        private static SqlDataAdapter adapter = DataTables.getAdapterEnrollments();
        private static DataSet ds = DataTables.getDataSet();

        private static DataTable displayEnrollments = null;

        internal static DataTable GetEnrollments()
        {

            ds.Tables["Enrollments"].AcceptChanges();

            var query = (
            from enroll in ds.Tables["Enrollments"].AsEnumerable()
            from prog in ds.Tables["Programs"].AsEnumerable()
            from course in ds.Tables["Courses"].AsEnumerable()
            from student in ds.Tables["Students"].AsEnumerable()
            where prog.Field<string>("ProgId") == course.Field<string>("ProgId")
            where enroll.Field<string>("CId") == course.Field<string>("CId")
            where enroll.Field<string>("StId") == student.Field<string>("StId")
         
            

          
            select new
            {
                StId = student.Field<string>("StId"),
                CId = course.Field<string>("CId"),
                FinalGrade = enroll.Field<string>("FinalGrade")

            });

            DataTable result = new DataTable();
            result.Columns.Add("StId");
            result.Columns.Add("CId");
            result.Columns.Add("FinalGrade");
            foreach (var item in query)
            {
                object[] allFields = { item.StId, item.CId, item.FinalGrade };
                result.Rows.Add(allFields);
            }
            displayEnrollments = result;
            return displayEnrollments;
        }


        internal static int AddData(string[] a)
        {
            var test = (
                   from enroll in ds.Tables["Enrollments"].AsEnumerable()
                   where enroll.Field<string>("StId") == a[0]
                   where enroll.Field<string>("CId") == a[1]
                   select enroll);
            if (test.Count() > 0)
            {
                College1en.Form1.DALMessage("This assignment already exists");
                return -1;
            }
            try
            {
                DataRow line = ds.Tables["Enrollments"].NewRow();
                line.SetField("StId", a[0]);
                line.SetField("CId", a[1]);
                ds.Tables["Enrollments"].Rows.Add(line);

                adapter.Update(ds.Tables["Enrollments"]);

                if (displayEnrollments != null)
                {
                    var query = (
                           from std in ds.Tables["Students"].AsEnumerable()
                           from cid in ds.Tables["Courses"].AsEnumerable()
                           where std.Field<string>("StId") == a[0]
                           where cid.Field<string>("CId") == a[1]
                           select new
                           {
                               StId = std.Field<string>("StId"),
                               StName = std.Field<string>("StName"),
                               CId = cid.Field<string>("CId"),
                               CName = cid.Field<string>("CName"),
                               Fgrade = line.Field<Nullable<int>>("FinalGrade")
                           });
                
                    var r = query.Single();
                    displayEnrollments.Rows.Add(new object[] { r.StId, r.StName, r.CId, r.CName, r.Fgrade });
                    College1en.Form1.DALMessage("Insertion successful");
                }
                return 0;
            }
            catch (Exception)
            {
                College1en.Form1.DALMessage("Insertion / Update rejected");
                return -1;
            }
        }

        internal static int ModData(string[] a)
        {
            var test = (
                   from enroll in ds.Tables["Enrollments"].AsEnumerable()
                   where enroll.Field<string>("StId") == a[0]
                   where enroll.Field<string>("CId") == a[1]
                   select enroll);
            if (test.Count() > 0)
            {
                College1en.Form1.DALMessage("This assignment already exists");
                return -1;
            }
            try
            {
                DataRow line = ds.Tables["Enrollments"].NewRow();
                line.SetField("StId", a[0]);
                line.SetField("CId", a[1]);
                ds.Tables["Enrollments"].Rows.Add(line);

                adapter.Update(ds.Tables["Enrollments"]);

                if (displayEnrollments != null)
                {
                    var query = (
                           from std in ds.Tables["Students"].AsEnumerable()
                           from cid in ds.Tables["Courses"].AsEnumerable()
                           where std.Field<string>("StId") == a[0]
                           where cid.Field<string>("CId") == a[1]
                           select new
                           {
                               StId = std.Field<string>("StId"),
                               StName = std.Field<string>("StName"),
                               CId = cid.Field<string>("CId"),
                               CName = cid.Field<string>("CName"),
                               Fgrade = line.Field<Nullable<int>>("FinalGrade")
                           });

                    var r = query.Single();
                    displayEnrollments.Rows.Add(new object[] { r.StId, r.StName, r.CId, r.CName, r.Fgrade });
                    College1en.Form1.DALMessage("Modication successful");
                }
                return 0;
            }
            catch (Exception)
            {
                College1en.Form1.DALMessage("Insertion / Update rejected");
                return -1;
            }
        }


        internal static int DeleteData(List<string[]> lId)
        {
            try
            {
                var lines = ds.Tables["Enrollments"].AsEnumerable()
                                .Where(s =>
                                   lId.Any(x => (x[0] == s.Field<string>("StId") && x[1] == s.Field<string>("CId"))));

                foreach (var line in lines)
                {
                    line.Delete();
                }

                adapter.Update(ds.Tables["Enrollments"]);

                if (displayEnrollments != null)
                {
                    foreach (var p in lId)
                    {
                        var r = displayEnrollments.AsEnumerable()
                                .Where(s => (s.Field<string>("StId") == p[0] && s.Field<string>("CId") == p[1]))
                                .Single();
                        displayEnrollments.Rows.Remove(r);
                    }
                }
                return 0;
            }
            catch (Exception)
            {
                College1en.Form1.DALMessage("Update / Deletion rejected");
                return -1;
            }
        }


        internal static int UpdateFinal(string[] a, Nullable<int> eval)
        {
            try
            {
                var line = ds.Tables["Enrollments"].AsEnumerable()
                                    .Where(s =>
                                      (s.Field<string>("StId") == a[0] && s.Field<string>("CId") == a[1]))
                                    .Single();

                line.SetField("FinalGrade", eval);

                adapter.Update(ds.Tables["Enrollments"]);

                if (displayEnrollments != null)
                {
                    var r = displayEnrollments.AsEnumerable()
                                    .Where(s =>
                                      (s.Field<string>("StId") == a[0] && s.Field<string>("CId") == a[1]))
                                    .Single();
                    r.SetField("FinalGrade", eval);
                }
                return 0;
            }
            catch (Exception)
            {
                College1en.Form1.DALMessage("Update / Deletion rejected");
                return -1;
            }
        }


        
    }













}
